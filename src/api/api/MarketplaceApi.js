/*
 * Hangme API
 * Hangme offers services for our merchant, consumer, driver and partner applications. How you can interact with these services is documented here.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Address} from '../model/Address';
import {AuthenticatorDetails} from '../model/AuthenticatorDetails';
import {Category} from '../model/Category';
import {CheckoutApiRequest} from '../model/CheckoutApiRequest';
import {Currency} from '../model/Currency';
import {Download} from '../model/Download';
import {EnableDisableTwoFactorAuthenticationResponse} from '../model/EnableDisableTwoFactorAuthenticationResponse';
import {KHQRResponseOfKHQRData} from '../model/KHQRResponseOfKHQRData';
import {KessApiResponseOfOrderData} from '../model/KessApiResponseOfOrderData';
import {Language} from '../model/Language';
import {NotificationDeviceType} from '../model/NotificationDeviceType';
import {Order} from '../model/Order';
import {OrderItem} from '../model/OrderItem';
import {ProblemDetails} from '../model/ProblemDetails';
import {Product} from '../model/Product';
import {ProductAddOn} from '../model/ProductAddOn';
import {ProductVariantType} from '../model/ProductVariantType';
import {ResizeParams} from '../model/ResizeParams';
import {SearchResults} from '../model/SearchResults';
import {Sort} from '../model/Sort';
import {SpecialCategory} from '../model/SpecialCategory';
import {Store} from '../model/Store';
import {StoreCategory} from '../model/StoreCategory';
import {SuspiciousActivityReport} from '../model/SuspiciousActivityReport';
import {Tenant} from '../model/Tenant';
import {TenantPaymentMethod} from '../model/TenantPaymentMethod';
import {UserProfile} from '../model/UserProfile';
import {WishlistItem} from '../model/WishlistItem';

/**
* Marketplace service.
* @module api/MarketplaceApi
* @version v1
*/
export class MarketplaceApi {

    /**
    * Constructs a new MarketplaceApi. 
    * @alias module:api/MarketplaceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addAddress operation.
     * @callback moduleapi/MarketplaceApi~addAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Address{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Address
     * Adds an address to the current logged in user
     * @param {module:model/Address} body 
     * @param {module:api/MarketplaceApi~addAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addAddress(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addAddress");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Address;

      return this.apiClient.callApi(
        '/api/v2/marketplace/addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the addProductToWishlist operation.
     * @callback moduleapi/MarketplaceApi~addProductToWishlistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WishlistItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Product To Wishlist
     * Adds a Product to the users wishlist
     * @param {Object} opts Optional parameters
     * @param {Number} opts.productId 
     * @param {String} opts.comment 
     * @param {Number} opts.wishlistId 
     * @param {Number} opts.quantity  (default to <.>)
     * @param {module:api/MarketplaceApi~addProductToWishlistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addProductToWishlist(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'productId': opts['productId'],'comment': opts['comment'],'wishlistId': opts['wishlistId'],'quantity': opts['quantity']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WishlistItem;

      return this.apiClient.callApi(
        '/api/v2/marketplace/wishlist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the addToCart operation.
     * @callback moduleapi/MarketplaceApi~addToCartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add to Cart
     * Adds an item to the cart for the current logged in user
     * @param {Array.<Number>} body 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.productId 
     * @param {Number} opts.quantity  (default to <.>)
     * @param {String} opts.instruction 
     * @param {module:api/MarketplaceApi~addToCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addToCart(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addToCart");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'productId': opts['productId'],'quantity': opts['quantity'],'instruction': opts['instruction']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderItem;

      return this.apiClient.callApi(
        '/api/v2/marketplace/cart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cancelOrder operation.
     * @callback moduleapi/MarketplaceApi~cancelOrderCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Order>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Order
     * Cancels an Order
     * @param {Number} id 
     * @param {module:api/MarketplaceApi~cancelOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cancelOrder(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelOrder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Order];

      return this.apiClient.callApi(
        '/api/v2/marketplace/orders/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the changeEmail operation.
     * @callback moduleapi/MarketplaceApi~changeEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send Change Email Verification
     * Sends the user an email to confirm that the user wants to change their e-mail address
     * @param {Object} opts Optional parameters
     * @param {String} opts.newEmail 
     * @param {module:api/MarketplaceApi~changeEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeEmail(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'newEmail': opts['newEmail']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/profile/email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the changePassword operation.
     * @callback moduleapi/MarketplaceApi~changePasswordCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Password
     * Change Password for the logged in user
     * @param {Object} opts Optional parameters
     * @param {String} opts.oldPassword 
     * @param {String} opts.newPassword 
     * @param {module:api/MarketplaceApi~changePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    changePassword(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'oldPassword': opts['oldPassword'],'newPassword': opts['newPassword']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';

      return this.apiClient.callApi(
        '/api/v2/marketplace/profile/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the checkout operation.
     * @callback moduleapi/MarketplaceApi~checkoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checkout
     * Creates a new order
     * @param {module:model/CheckoutApiRequest} body 
     * @param {module:api/MarketplaceApi~checkoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    checkout(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling checkout");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Order;

      return this.apiClient.callApi(
        '/api/v2/marketplace/checkout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createBongloyCharge operation.
     * @callback moduleapi/MarketplaceApi~createBongloyChargeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Bongloy Charge
     * Creates a Bongloy Charge based on an Order ID
     * @param {Number} orderId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.tokenId 
     * @param {module:api/MarketplaceApi~createBongloyChargeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createBongloyCharge(orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling createBongloyCharge");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
        'tokenId': opts['tokenId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Order;

      return this.apiClient.callApi(
        '/api/v2/marketplace/payment/bongloy/charge/{orderId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createKessTransaction operation.
     * @callback moduleapi/MarketplaceApi~createKessTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KessApiResponseOfOrderData{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create KESS Transaction
     * Create a Transaction to be paid using KESS Payment Gateway
     * @param {Number} orderId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.redirectUrl 
     * @param {module:api/MarketplaceApi~createKessTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createKessTransaction(orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling createKessTransaction");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
        'redirectUrl': opts['redirectUrl']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KessApiResponseOfOrderData;

      return this.apiClient.callApi(
        '/api/v2/marketplace/payment/kess/{orderId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteAddress operation.
     * @callback moduleapi/MarketplaceApi~deleteAddressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Address
     * Deletes an address for the current logged in user
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id 
     * @param {module:api/MarketplaceApi~deleteAddressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAddress(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/addresses', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletePersonalData operation.
     * @callback moduleapi/MarketplaceApi~deletePersonalDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Personal Data
     * Deletes the Personal Data for the logged in user
     * @param {Object} opts Optional parameters
     * @param {String} opts.password 
     * @param {module:api/MarketplaceApi~deletePersonalDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePersonalData(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'password': opts['password']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/profile/personal-data', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the downloadFile operation.
     * @callback moduleapi/MarketplaceApi~downloadFileCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download File
     * Downloads a File by its ID
     * @param {Number} id 
     * @param {module:api/MarketplaceApi~downloadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    downloadFile(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/api/v2/marketplace/profile/downloads/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the emptyCart operation.
     * @callback moduleapi/MarketplaceApi~emptyCartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Empty Cart
     * Empties the cart of the current logged in user for all stores
     * @param {module:api/MarketplaceApi~emptyCartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    emptyCart(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/cart', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the emptyStoreCart operation.
     * @callback moduleapi/MarketplaceApi~emptyStoreCartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Empty Store Cart
     * Empties the cart of the current logged in user for the specified store
     * @param {Number} storeId 
     * @param {module:api/MarketplaceApi~emptyStoreCartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    emptyStoreCart(storeId, callback) {
      
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling emptyStoreCart");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/stores/{storeId}/cart', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the emptyWishlistForUser operation.
     * @callback moduleapi/MarketplaceApi~emptyWishlistForUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Empty Wishlist For User
     * Empties a user&#x27;s wishlist
     * @param {Object} opts Optional parameters
     * @param {Number} opts.wishlistId 
     * @param {module:api/MarketplaceApi~emptyWishlistForUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    emptyWishlistForUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'wishlistId': opts['wishlistId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/wishlist', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the enableDisableAuthenticator operation.
     * @callback moduleapi/MarketplaceApi~enableDisableAuthenticatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnableDisableTwoFactorAuthenticationResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable/Disable Authenticator
     * Enables or Disables the authenticator for the logged in user
     * @param {Object} opts Optional parameters
     * @param {String} opts.code 
     * @param {Boolean} opts.enable 
     * @param {module:api/MarketplaceApi~enableDisableAuthenticatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    enableDisableAuthenticator(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'code': opts['code'],'enable': opts['enable']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnableDisableTwoFactorAuthenticationResponse;

      return this.apiClient.callApi(
        '/api/v2/marketplace/profile/authenticator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the followStore operation.
     * @callback moduleapi/MarketplaceApi~followStoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow Store
     * Follows a store as the current user
     * @param {Number} id 
     * @param {module:api/MarketplaceApi~followStoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    followStore(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling followStore");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/stores/{id}/follow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the generateKHQRCode operation.
     * @callback moduleapi/MarketplaceApi~generateKHQRCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KHQRResponseOfKHQRData{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate KHQR Code
     * Generates a KHQR Code for use with Bakong
     * @param {Number} orderId 
     * @param {module:api/MarketplaceApi~generateKHQRCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    generateKHQRCode(orderId, callback) {
      
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling generateKHQRCode");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KHQRResponseOfKHQRData;

      return this.apiClient.callApi(
        '/api/v2/marketplace/payment/bakong/{orderId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the generateSupportPin operation.
     * @callback moduleapi/MarketplaceApi~generateSupportPinCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Support PIN
     * Generates the Support PIN for the logged in user
     * @param {module:api/MarketplaceApi~generateSupportPinCallback} callback The callback function, accepting three arguments: error, data, response
     */
    generateSupportPin(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/profile/support', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAddresses operation.
     * @callback moduleapi/MarketplaceApi~getAddressesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Address>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Addresses
     * Gets the addresses for the current logged in user
     * @param {module:api/MarketplaceApi~getAddressesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAddresses(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Address];

      return this.apiClient.callApi(
        '/api/v2/marketplace/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAuthenticatorDetails operation.
     * @callback moduleapi/MarketplaceApi~getAuthenticatorDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticatorDetails{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Authenticator Details
     * Gets the Authenticator Details for the logged in user
     * @param {module:api/MarketplaceApi~getAuthenticatorDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAuthenticatorDetails(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthenticatorDetails;

      return this.apiClient.callApi(
        '/api/v2/marketplace/profile/authenticator', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBakongTransactionDeeplink operation.
     * @callback moduleapi/MarketplaceApi~getBakongTransactionDeeplinkCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Bakong Transaction Deeplink
     * Generates a deeplink to Bakong
     * @param {Number} orderId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.appDeepLinkCallback 
     * @param {module:api/MarketplaceApi~getBakongTransactionDeeplinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBakongTransactionDeeplink(orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getBakongTransactionDeeplink");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
        'appDeepLinkCallback': opts['appDeepLinkCallback']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/v2/marketplace/payment/bakong/deeplink/{orderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCart operation.
     * @callback moduleapi/MarketplaceApi~getCartCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrderItem>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Cart
     * Gets the cart for the current logged in user
     * @param {module:api/MarketplaceApi~getCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCart(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrderItem];

      return this.apiClient.callApi(
        '/api/v2/marketplace/cart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCategoriesFromStore operation.
     * @callback moduleapi/MarketplaceApi~getCategoriesFromStoreCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Category>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Categories From Store
     * Gets the categories in a store
     * @param {Number} storeId 
     * @param {module:api/MarketplaceApi~getCategoriesFromStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCategoriesFromStore(storeId, callback) {
      
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getCategoriesFromStore");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Category];

      return this.apiClient.callApi(
        '/api/v2/marketplace/stores/{storeId}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCategoryById operation.
     * @callback moduleapi/MarketplaceApi~getCategoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Category{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Category
     * Gets a category by its ID
     * @param {Number} id 
     * @param {module:api/MarketplaceApi~getCategoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCategoryById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCategoryById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Category;

      return this.apiClient.callApi(
        '/api/v2/marketplace/categories/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCurrencies operation.
     * @callback moduleapi/MarketplaceApi~getCurrenciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Currency>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Currencies
     * Gets a list of the supported Currencies
     * @param {module:api/MarketplaceApi~getCurrenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCurrencies(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Currency];

      return this.apiClient.callApi(
        '/api/v2/marketplace/currencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCurrentTenant2 operation.
     * @callback moduleapi/MarketplaceApi~getCurrentTenant2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Tenant{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Current Tenant
     * Gets the Current Tenant information
     * @param {module:api/MarketplaceApi~getCurrentTenant2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCurrentTenant2(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tenant;

      return this.apiClient.callApi(
        '/api/v2/marketplace/tenant', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCurrentUser operation.
     * @callback moduleapi/MarketplaceApi~getCurrentUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProfile{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Current User Profile
     * Gets a the current logged in user&#x27;s profile
     * @param {module:api/MarketplaceApi~getCurrentUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCurrentUser(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserProfile;

      return this.apiClient.callApi(
        '/api/v2/marketplace/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getFollowedStores operation.
     * @callback moduleapi/MarketplaceApi~getFollowedStoresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Store>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Followed Stores
     * Gets a list of all Stores the current user is following.
     * @param {module:api/MarketplaceApi~getFollowedStoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getFollowedStores(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Store];

      return this.apiClient.callApi(
        '/api/v2/marketplace/profile/stores/following', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getLanguages operation.
     * @callback moduleapi/MarketplaceApi~getLanguagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Language>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Languages
     * Gets a list of the supported Languages
     * @param {module:api/MarketplaceApi~getLanguagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getLanguages(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Language];

      return this.apiClient.callApi(
        '/api/v2/marketplace/languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMediaFile operation.
     * @callback moduleapi/MarketplaceApi~getMediaFileCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Media File
     * Gets a Media File by its ID
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ResizeParams} opts.resizeParams 
     * @param {module:api/MarketplaceApi~getMediaFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMediaFile(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMediaFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'resizeParams': opts['resizeParams']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/api/v2/marketplace/media/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMyDownloads operation.
     * @callback moduleapi/MarketplaceApi~getMyDownloadsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Download>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get My Downloads
     * Gets a list of all Downloads for products purchased by the user.
     * @param {module:api/MarketplaceApi~getMyDownloadsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMyDownloads(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Download];

      return this.apiClient.callApi(
        '/api/v2/marketplace/profile/downloads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOrderById operation.
     * @callback moduleapi/MarketplaceApi~getOrderByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Order
     * Gets an Order with the specified ID
     * @param {Number} id 
     * @param {module:api/MarketplaceApi~getOrderByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOrderById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrderById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Order;

      return this.apiClient.callApi(
        '/api/v2/marketplace/orders/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOrderByIdAll operation.
     * @callback moduleapi/MarketplaceApi~getOrderByIdAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Order>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Orders
     * Searches for a users orders by ID, Store Name, Product Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.query 
     * @param {module:api/MarketplaceApi~getOrderByIdAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOrderByIdAll(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'query': opts['query']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Order];

      return this.apiClient.callApi(
        '/api/v2/marketplace/orders/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOrders operation.
     * @callback moduleapi/MarketplaceApi~getOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Order>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Orders
     * Gets the user&#x27;s orders
     * @param {module:api/MarketplaceApi~getOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOrders(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Order];

      return this.apiClient.callApi(
        '/api/v2/marketplace/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPaymentMethods operation.
     * @callback moduleapi/MarketplaceApi~getPaymentMethodsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TenantPaymentMethod>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Payment Methods
     * Gets the list of Payment methods supported by the system
     * @param {module:api/MarketplaceApi~getPaymentMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPaymentMethods(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TenantPaymentMethod];

      return this.apiClient.callApi(
        '/api/v2/marketplace/payment-methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPersonalData operation.
     * @callback moduleapi/MarketplaceApi~getPersonalDataCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Personal Data
     * Gets the Personal Data for the logged in user
     * @param {module:api/MarketplaceApi~getPersonalDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPersonalData(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/api/v2/marketplace/profile/personal-data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPopularProducts operation.
     * @callback moduleapi/MarketplaceApi~getPopularProductsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Product>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Popular Products
     * Gets a list of the most popular products.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize  (default to <.>)
     * @param {module:api/MarketplaceApi~getPopularProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPopularProducts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'pageSize': opts['pageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Product];

      return this.apiClient.callApi(
        '/api/v2/marketplace/products/popular', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPopularStores operation.
     * @callback moduleapi/MarketplaceApi~getPopularStoresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Store>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Popular Stores
     * Gets a list of all popular stores
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize  (default to <.>)
     * @param {module:api/MarketplaceApi~getPopularStoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPopularStores(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'pageSize': opts['pageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Store];

      return this.apiClient.callApi(
        '/api/v2/marketplace/stores/popular', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPrivacyPolicy operation.
     * @callback moduleapi/MarketplaceApi~getPrivacyPolicyCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Privacy Policy
     * Gets the privacy policy
     * @param {module:api/MarketplaceApi~getPrivacyPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPrivacyPolicy(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/v2/marketplace/privacy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProductAddOns operation.
     * @callback moduleapi/MarketplaceApi~getProductAddOnsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductAddOn>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Add ons
     * Gets a Product Addons by Product ID
     * @param {Number} productId 
     * @param {module:api/MarketplaceApi~getProductAddOnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProductAddOns(productId, callback) {
      
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductAddOns");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProductAddOn];

      return this.apiClient.callApi(
        '/api/v2/marketplace/products/{productId}/addons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProductById operation.
     * @callback moduleapi/MarketplaceApi~getProductByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product
     * Gets a Product by its ID
     * @param {Number} id 
     * @param {module:api/MarketplaceApi~getProductByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProductById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Product;

      return this.apiClient.callApi(
        '/api/v2/marketplace/products/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProductBySlug operation.
     * @callback moduleapi/MarketplaceApi~getProductBySlugCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product By Slug
     * Gets a Product by its Slug
     * @param {String} id 
     * @param {module:api/MarketplaceApi~getProductBySlugCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProductBySlug(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductBySlug");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Product;

      return this.apiClient.callApi(
        '/api/v2/marketplace/products/slug/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProductDownloads operation.
     * @callback moduleapi/MarketplaceApi~getProductDownloadsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Download>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of any digital downloads linked to the product
     * Get details of any digital downloads linked to the product by Product ID
     * @param {Number} productId 
     * @param {module:api/MarketplaceApi~getProductDownloadsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProductDownloads(productId, callback) {
      
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductDownloads");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Download];

      return this.apiClient.callApi(
        '/api/v2/marketplace/products/{productId}/downloads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProductRating operation.
     * @callback moduleapi/MarketplaceApi~getProductRatingCallback
     * @param {String} error Error message, if any.
     * @param {'Number'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Rating
     * Gets a Product Rating by ID
     * @param {Number} productId 
     * @param {module:api/MarketplaceApi~getProductRatingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProductRating(productId, callback) {
      
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductRating");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';

      return this.apiClient.callApi(
        '/api/v2/marketplace/products/{productId}/rating', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProductRatingsCount operation.
     * @callback moduleapi/MarketplaceApi~getProductRatingsCountCallback
     * @param {String} error Error message, if any.
     * @param {'Number'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Ratings Count
     * Gets a Product Ratings Count by ID
     * @param {Number} productId 
     * @param {module:api/MarketplaceApi~getProductRatingsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProductRatingsCount(productId, callback) {
      
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductRatingsCount");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';

      return this.apiClient.callApi(
        '/api/v2/marketplace/products/{productId}/ratings-count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProductVariantTypes operation.
     * @callback moduleapi/MarketplaceApi~getProductVariantTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductVariantType>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Variant Types
     * Gets a Product Variant Types by Product ID
     * @param {Number} productId 
     * @param {module:api/MarketplaceApi~getProductVariantTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProductVariantTypes(productId, callback) {
      
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductVariantTypes");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProductVariantType];

      return this.apiClient.callApi(
        '/api/v2/marketplace/products/{productId}/varianttypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProductVariants operation.
     * @callback moduleapi/MarketplaceApi~getProductVariantsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Product>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Variants
     * Gets the Products Variants by its Product ID
     * @param {Number} productId 
     * @param {module:api/MarketplaceApi~getProductVariantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProductVariants(productId, callback) {
      
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductVariants");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Product];

      return this.apiClient.callApi(
        '/api/v2/marketplace/products/{productId}/variants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPublicStores operation.
     * @callback moduleapi/MarketplaceApi~getPublicStoresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Store>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Listed Stores
     * Gets a list of all publically listed stores.
     * @param {module:api/MarketplaceApi~getPublicStoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPublicStores(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Store];

      return this.apiClient.callApi(
        '/api/v2/marketplace/stores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRelatedProducts operation.
     * @callback moduleapi/MarketplaceApi~getRelatedProductsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Product>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Related Products
     * Gets the related products by product ID
     * @param {Number} productId 
     * @param {module:api/MarketplaceApi~getRelatedProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getRelatedProducts(productId, callback) {
      
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getRelatedProducts");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Product];

      return this.apiClient.callApi(
        '/api/v2/marketplace/products/{productId}/related', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getResources operation.
     * @callback moduleapi/MarketplaceApi~getResourcesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': 'String'}>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Resources
     * Gets the Resources
     * @param {String} culture 
     * @param {module:api/MarketplaceApi~getResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getResources(culture, callback) {
      
      let postBody = null;
      // verify the required parameter 'culture' is set
      if (culture === undefined || culture === null) {
        throw new Error("Missing the required parameter 'culture' when calling getResources");
      }

      let pathParams = {
        'culture': culture
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/api/v2/marketplace/resources/{culture}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSpecialCategories operation.
     * @callback moduleapi/MarketplaceApi~getSpecialCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SpecialCategory>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Special Categories
     * Gets a list of all Special Categories.
     * @param {module:api/MarketplaceApi~getSpecialCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSpecialCategories(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SpecialCategory];

      return this.apiClient.callApi(
        '/api/v2/marketplace/special-categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSpecialCategoryById operation.
     * @callback moduleapi/MarketplaceApi~getSpecialCategoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecialCategory{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Special Category
     * Gets the Special Category with the specified ID
     * @param {Number} id 
     * @param {module:api/MarketplaceApi~getSpecialCategoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSpecialCategoryById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSpecialCategoryById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SpecialCategory;

      return this.apiClient.callApi(
        '/api/v2/marketplace/special-categories/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStoreById operation.
     * @callback moduleapi/MarketplaceApi~getStoreByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Store{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Store
     * Gets the store by its ID
     * @param {Number} id 
     * @param {module:api/MarketplaceApi~getStoreByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getStoreById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStoreById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Store;

      return this.apiClient.callApi(
        '/api/v2/marketplace/stores/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStoreBySubdomain operation.
     * @callback moduleapi/MarketplaceApi~getStoreBySubdomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Store{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Store By Subdomain
     * Gets the store by its subdomain
     * @param {String} id 
     * @param {module:api/MarketplaceApi~getStoreBySubdomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getStoreBySubdomain(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStoreBySubdomain");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Store;

      return this.apiClient.callApi(
        '/api/v2/marketplace/stores/subdomain/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStoreCategories operation.
     * @callback moduleapi/MarketplaceApi~getStoreCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StoreCategory>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Store Categories
     * Gets a list of all Store Categories.
     * @param {module:api/MarketplaceApi~getStoreCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getStoreCategories(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [StoreCategory];

      return this.apiClient.callApi(
        '/api/v2/marketplace/store-categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStoreCategoryById operation.
     * @callback moduleapi/MarketplaceApi~getStoreCategoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoreCategory{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Store Category
     * Gets a Store Category with the specified ID.
     * @param {Number} id 
     * @param {module:api/MarketplaceApi~getStoreCategoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getStoreCategoryById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStoreCategoryById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StoreCategory;

      return this.apiClient.callApi(
        '/api/v2/marketplace/store-categories/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStoreProducts operation.
     * @callback moduleapi/MarketplaceApi~getStoreProductsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Product>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Store Products
     * Gets the products in a store
     * @param {Number} id 
     * @param {module:api/MarketplaceApi~getStoreProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getStoreProducts(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStoreProducts");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Product];

      return this.apiClient.callApi(
        '/api/v2/marketplace/stores/{id}/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStoreProductsByCategory operation.
     * @callback moduleapi/MarketplaceApi~getStoreProductsByCategoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Product>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Store Products By Category
     * Gets the products in a store in a category
     * @param {Number} id 
     * @param {module:api/MarketplaceApi~getStoreProductsByCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getStoreProductsByCategory(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStoreProductsByCategory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Product];

      return this.apiClient.callApi(
        '/api/v2/marketplace/categories/{id}/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStoresByCategoryId operation.
     * @callback moduleapi/MarketplaceApi~getStoresByCategoryIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Store>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Stores By Category
     * Gets a list of Stores by Store Category.
     * @param {Number} storeCategoryId 
     * @param {module:api/MarketplaceApi~getStoresByCategoryIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getStoresByCategoryId(storeCategoryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'storeCategoryId' is set
      if (storeCategoryId === undefined || storeCategoryId === null) {
        throw new Error("Missing the required parameter 'storeCategoryId' when calling getStoresByCategoryId");
      }

      let pathParams = {
        'storeCategoryId': storeCategoryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Store];

      return this.apiClient.callApi(
        '/api/v2/marketplace/store-categories/{storeCategoryId}/stores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTermsAndConditions operation.
     * @callback moduleapi/MarketplaceApi~getTermsAndConditionsCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Terms and Conditions
     * Gets the terms and conditions
     * @param {module:api/MarketplaceApi~getTermsAndConditionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTermsAndConditions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/v2/marketplace/terms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getWishlistForUser operation.
     * @callback moduleapi/MarketplaceApi~getWishlistForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WishlistItem>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Wishlist For User
     * Gets the users wishlist
     * @param {Object} opts Optional parameters
     * @param {Number} opts.wishlistId 
     * @param {Number} opts.storeId 
     * @param {module:api/MarketplaceApi~getWishlistForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getWishlistForUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'wishlistId': opts['wishlistId'],'storeId': opts['storeId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WishlistItem];

      return this.apiClient.callApi(
        '/api/v2/marketplace/wishlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getWishlistItemByProductId operation.
     * @callback moduleapi/MarketplaceApi~getWishlistItemByProductIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Wishlist Item By Product Id
     * Returns OK if the product is in the wishlist, returns Not Found if product is not in wishlist
     * @param {Number} productId 
     * @param {module:api/MarketplaceApi~getWishlistItemByProductIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getWishlistItemByProductId(productId, callback) {
      
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getWishlistItemByProductId");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/wishlist/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the hasUserAlreadyPurchasedProduct operation.
     * @callback moduleapi/MarketplaceApi~hasUserAlreadyPurchasedProductCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if consumer has previously purchased the product
     * Check if consumer has previously purchased the product by Product ID
     * @param {Number} productId 
     * @param {module:api/MarketplaceApi~hasUserAlreadyPurchasedProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    hasUserAlreadyPurchasedProduct(productId, callback) {
      
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling hasUserAlreadyPurchasedProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';

      return this.apiClient.callApi(
        '/api/v2/marketplace/products/{productId}/purchased', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the isStoreFollower operation.
     * @callback moduleapi/MarketplaceApi~isStoreFollowerCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Is Store Follower
     * Returns whether or not the current user is following the specified store
     * @param {Number} id 
     * @param {module:api/MarketplaceApi~isStoreFollowerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    isStoreFollower(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling isStoreFollower");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';

      return this.apiClient.callApi(
        '/api/v2/marketplace/stores/{id}/follower', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the marketplaceGetProductsBySpecialCategoryId operation.
     * @callback moduleapi/MarketplaceApi~marketplaceGetProductsBySpecialCategoryIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Product>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetProductsBySpecialCategoryId
     * Gets the Products in the Special Category with the specified ID
     * @param {Number} id 
     * @param {module:api/MarketplaceApi~marketplaceGetProductsBySpecialCategoryIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    marketplaceGetProductsBySpecialCategoryId(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling marketplaceGetProductsBySpecialCategoryId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Product];

      return this.apiClient.callApi(
        '/api/v2/marketplace/special-categories/{id}/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the queryBakongTransaction operation.
     * @callback moduleapi/MarketplaceApi~queryBakongTransactionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query Bakong Transaction
     * Query a Bakong Transaction by Order ID
     * @param {Number} orderId 
     * @param {module:api/MarketplaceApi~queryBakongTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    queryBakongTransaction(orderId, callback) {
      
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling queryBakongTransaction");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/payment/bakong/{orderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the queryKessTransaction operation.
     * @callback moduleapi/MarketplaceApi~queryKessTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KessApiResponseOfOrderData{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query KESS Transaction
     * Query for a transaction created using the KESS Payment Gateway
     * @param {Number} orderId 
     * @param {module:api/MarketplaceApi~queryKessTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    queryKessTransaction(orderId, callback) {
      
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling queryKessTransaction");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KessApiResponseOfOrderData;

      return this.apiClient.callApi(
        '/api/v2/marketplace/payment/kess/{orderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the rateProduct operation.
     * @callback moduleapi/MarketplaceApi~rateProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rate Product
     * Rates a Product from 1 to 5
     * @param {Number} productId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.rating 
     * @param {module:api/MarketplaceApi~rateProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rateProduct(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling rateProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'rating': opts['rating']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/products/{productId}/rating', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the registerDevice operation.
     * @callback moduleapi/MarketplaceApi~registerDeviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register Device
     * Registers a device for push notifications
     * @param {Object} opts Optional parameters
     * @param {String} opts.deviceToken 
     * @param {module:model/NotificationDeviceType} opts.deviceType 
     * @param {module:api/MarketplaceApi~registerDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    registerDevice(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'deviceToken': opts['deviceToken'],'deviceType': opts['deviceType']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/devices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the removeFromCart operation.
     * @callback moduleapi/MarketplaceApi~removeFromCartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove From Cart
     * Removes an item to the cart for the current logged in user
     * @param {Number} orderItemId 
     * @param {module:api/MarketplaceApi~removeFromCartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeFromCart(orderItemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'orderItemId' is set
      if (orderItemId === undefined || orderItemId === null) {
        throw new Error("Missing the required parameter 'orderItemId' when calling removeFromCart");
      }

      let pathParams = {
        'orderItemId': orderItemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/cart/{orderItemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the removeProductFromWishlist operation.
     * @callback moduleapi/MarketplaceApi~removeProductFromWishlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Product From Wishlist
     * Removes a Product from the users wishlist
     * @param {Number} productId 
     * @param {module:api/MarketplaceApi~removeProductFromWishlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeProductFromWishlist(productId, callback) {
      
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling removeProductFromWishlist");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/wishlist/{productId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the reportProduct operation.
     * @callback moduleapi/MarketplaceApi~reportProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Report Product
     * Reports a Product for suspicious activity
     * @param {module:model/SuspiciousActivityReport} body 
     * @param {Number} id 
     * @param {module:api/MarketplaceApi~reportProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportProduct(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reportProduct");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportProduct");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/products/{id}/report', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the reportStore operation.
     * @callback moduleapi/MarketplaceApi~reportStoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Report Store
     * Reports a Store for suspicious activity
     * @param {module:model/SuspiciousActivityReport} body 
     * @param {Number} id 
     * @param {module:api/MarketplaceApi~reportStoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportStore(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reportStore");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportStore");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/stores/{id}/report', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the reportUser operation.
     * @callback moduleapi/MarketplaceApi~reportUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Report User
     * Reports a User for suspicious activity
     * @param {module:model/SuspiciousActivityReport} body 
     * @param {String} id 
     * @param {module:api/MarketplaceApi~reportUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportUser(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reportUser");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reportUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/users/{id}/report', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the search operation.
     * @callback moduleapi/MarketplaceApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResults{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search
     * Search for stores and products in the marketplace
     * @param {Object} opts Optional parameters
     * @param {String} opts.search 
     * @param {Number} opts.page 
     * @param {module:model/Sort} opts.sort 
     * @param {module:api/MarketplaceApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    search(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'search': opts['search'],'page': opts['page'],'sort': opts['sort']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchResults;

      return this.apiClient.callApi(
        '/api/v2/marketplace/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the unfollowStore operation.
     * @callback moduleapi/MarketplaceApi~unfollowStoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow Store
     * Unfollows a store as the current user
     * @param {Number} id 
     * @param {module:api/MarketplaceApi~unfollowStoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unfollowStore(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling unfollowStore");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/stores/{id}/unfollow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the unregisterDevice operation.
     * @callback moduleapi/MarketplaceApi~unregisterDeviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unregister Device
     * Unregisters a device from push notifications
     * @param {Object} opts Optional parameters
     * @param {String} opts.deviceToken 
     * @param {module:api/MarketplaceApi~unregisterDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unregisterDevice(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'deviceToken': opts['deviceToken']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/devices', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateCartItemQuantity operation.
     * @callback moduleapi/MarketplaceApi~updateCartItemQuantityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Cart Item Quantity
     * Updates the Quantity of a Cart Item
     * @param {Number} orderItemId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.quantity 
     * @param {module:api/MarketplaceApi~updateCartItemQuantityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCartItemQuantity(orderItemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderItemId' is set
      if (orderItemId === undefined || orderItemId === null) {
        throw new Error("Missing the required parameter 'orderItemId' when calling updateCartItemQuantity");
      }

      let pathParams = {
        'orderItemId': orderItemId
      };
      let queryParams = {
        'quantity': opts['quantity']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/cart/{orderItemId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateUserProfile operation.
     * @callback moduleapi/MarketplaceApi~updateUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProfile{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Current User Profile
     * Updates the current logged in user&#x27;s profile
     * @param {Object} opts Optional parameters
     * @param {String} opts.firstName 
     * @param {String} opts.lastName 
     * @param {String} opts.email 
     * @param {String} opts.phoneNumber 
     * @param {String} opts.language 
     * @param {Number} opts.defaultAddressId 
     * @param {module:api/MarketplaceApi~updateUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateUserProfile(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'firstName': opts['firstName'],'lastName': opts['lastName'],'email': opts['email'],'phoneNumber': opts['phoneNumber'],'language': opts['language'],'defaultAddressId': opts['defaultAddressId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserProfile;

      return this.apiClient.callApi(
        '/api/v2/marketplace/profile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateWishlistItem operation.
     * @callback moduleapi/MarketplaceApi~updateWishlistItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WishlistItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Wishlist Item
     * Updates a wishlist item
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.quantity  (default to <.>)
     * @param {String} opts.comment 
     * @param {module:api/MarketplaceApi~updateWishlistItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateWishlistItem(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWishlistItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'quantity': opts['quantity'],'comment': opts['comment']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WishlistItem;

      return this.apiClient.callApi(
        '/api/v2/marketplace/wishlist/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the verifyEmail operation.
     * @callback moduleapi/MarketplaceApi~verifyEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send Email Verification
     * Sends the user an email to confirm their e-mail address
     * @param {module:api/MarketplaceApi~verifyEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    verifyEmail(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/marketplace/profile/verify-email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the verifyKessTransaction operation.
     * @callback moduleapi/MarketplaceApi~verifyKessTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify KESS Transaction
     * Updates an Order based on the current payment status
     * @param {String} outTradeNo 
     * @param {module:api/MarketplaceApi~verifyKessTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    verifyKessTransaction(outTradeNo, callback) {
      
      let postBody = null;
      // verify the required parameter 'outTradeNo' is set
      if (outTradeNo === undefined || outTradeNo === null) {
        throw new Error("Missing the required parameter 'outTradeNo' when calling verifyKessTransaction");
      }

      let pathParams = {
        'out_trade_no': outTradeNo
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Order;

      return this.apiClient.callApi(
        '/api/v2/marketplace/payment/kess/verify/{out_trade_no}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}