/*
 * Hangme API
 * Hangme offers services for our merchant, consumer, driver and partner applications. How you can interact with these services is documented here.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Category} from '../model/Category';
import {MerchantProductsDashboard} from '../model/MerchantProductsDashboard';
import {MerchantStoreDashboard} from '../model/MerchantStoreDashboard';
import {Order} from '../model/Order';
import {Product} from '../model/Product';
import {Store} from '../model/Store';
import {UserProfile} from '../model/UserProfile';

/**
* Merchant service.
* @module api/MerchantApi
* @version v1
*/
export class MerchantApi {

    /**
    * Constructs a new MerchantApi. 
    * @alias module:api/MerchantApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the acceptMerchantStoreOrder operation.
     * @callback moduleapi/MerchantApi~acceptMerchantStoreOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept Merchant Store Order
     * Accepts an order by its ID
     * @param {Number} orderId 
     * @param {module:api/MerchantApi~acceptMerchantStoreOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    acceptMerchantStoreOrder(orderId, callback) {
      
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling acceptMerchantStoreOrder");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Order;

      return this.apiClient.callApi(
        '/api/v3/merchant/stores/orders/{orderId}/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the addProductToStore operation.
     * @callback moduleapi/MerchantApi~addProductToStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Product To Store
     * Adds a Product to a Merchants Store
     * @param {module:model/Product} body 
     * @param {Number} storeId 
     * @param {module:api/MerchantApi~addProductToStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addProductToStore(body, storeId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addProductToStore");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling addProductToStore");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Product;

      return this.apiClient.callApi(
        '/api/v3/merchant/stores/{storeId}/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cancelMerchantOrderShipping operation.
     * @callback moduleapi/MerchantApi~cancelMerchantOrderShippingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Merchant Store Order Shipping
     * Cancels the shipping 
     * @param {Number} orderId 
     * @param {module:api/MerchantApi~cancelMerchantOrderShippingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelMerchantOrderShipping(orderId, callback) {
      
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling cancelMerchantOrderShipping");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/merchant/stores/orders/{orderId}/cancel-shipping', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cancelMerchantStoreOrder operation.
     * @callback moduleapi/MerchantApi~cancelMerchantStoreOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Merchant Store Order
     * Cancel an order by its ID
     * @param {Number} orderId 
     * @param {module:api/MerchantApi~cancelMerchantStoreOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    cancelMerchantStoreOrder(orderId, callback) {
      
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling cancelMerchantStoreOrder");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Order;

      return this.apiClient.callApi(
        '/api/v3/merchant/stores/orders/{orderId}/cancel', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createMerchantCategory operation.
     * @callback moduleapi/MerchantApi~createMerchantCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Category{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Merchant Category
     * Creates a Category in a Merchants Store
     * @param {module:model/Category} body 
     * @param {Number} storeId 
     * @param {module:api/MerchantApi~createMerchantCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createMerchantCategory(body, storeId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createMerchantCategory");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling createMerchantCategory");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Category;

      return this.apiClient.callApi(
        '/api/v3/merchant/stores/{storeId}/categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteMerchantCategory operation.
     * @callback moduleapi/MerchantApi~deleteMerchantCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Merchant Category
     * Deletes a Category from a Merchants Store
     * @param {Number} storeId 
     * @param {Number} categoryId 
     * @param {module:api/MerchantApi~deleteMerchantCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMerchantCategory(storeId, categoryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling deleteMerchantCategory");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling deleteMerchantCategory");
      }

      let pathParams = {
        'storeId': storeId,'categoryId': categoryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/merchant/stores/{storeId}/categories/{categoryId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteMerchantProduct operation.
     * @callback moduleapi/MerchantApi~deleteMerchantProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Merchant Product
     * Deletes a Product from a Merchants Store
     * @param {Number} storeId 
     * @param {Number} productId 
     * @param {module:api/MerchantApi~deleteMerchantProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMerchantProduct(storeId, productId, callback) {
      
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling deleteMerchantProduct");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteMerchantProduct");
      }

      let pathParams = {
        'storeId': storeId,'productId': productId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v3/merchant/stores/{storeId}/products/{productId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMerchantProductsDashboard operation.
     * @callback moduleapi/MerchantApi~getMerchantProductsDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MerchantProductsDashboard{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Merchant Products Dashboard
     * Gets the Merchant products dashboard statistics
     * @param {Number} storeId 
     * @param {module:api/MerchantApi~getMerchantProductsDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMerchantProductsDashboard(storeId, callback) {
      
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getMerchantProductsDashboard");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MerchantProductsDashboard;

      return this.apiClient.callApi(
        '/api/v3/merchant/stores/{storeId}/products/dashboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMerchantStore operation.
     * @callback moduleapi/MerchantApi~getMerchantStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Store{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Merchant Store
     * Gets a Merchants Store by ID
     * @param {Number} storeId 
     * @param {module:api/MerchantApi~getMerchantStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMerchantStore(storeId, callback) {
      
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getMerchantStore");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Store;

      return this.apiClient.callApi(
        '/api/v3/merchant/stores/{storeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMerchantStoreCategories operation.
     * @callback moduleapi/MerchantApi~getMerchantStoreCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Category>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Merchant Store Categories
     * Gets a list of categories that the user can manage
     * @param {Number} storeId 
     * @param {module:api/MerchantApi~getMerchantStoreCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMerchantStoreCategories(storeId, callback) {
      
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getMerchantStoreCategories");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Category];

      return this.apiClient.callApi(
        '/api/v3/merchant/stores/{storeId}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMerchantStoreDashboard operation.
     * @callback moduleapi/MerchantApi~getMerchantStoreDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MerchantStoreDashboard{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Merchant Store Dashboard
     * Gets the Merchant dashboard statistics
     * @param {Number} storeId 
     * @param {module:api/MerchantApi~getMerchantStoreDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMerchantStoreDashboard(storeId, callback) {
      
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getMerchantStoreDashboard");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MerchantStoreDashboard;

      return this.apiClient.callApi(
        '/api/v3/merchant/stores/{storeId}/dashboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMerchantStoreOrder operation.
     * @callback moduleapi/MerchantApi~getMerchantStoreOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Merchant Store Order
     * Gets an order by its ID
     * @param {Number} orderId 
     * @param {module:api/MerchantApi~getMerchantStoreOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMerchantStoreOrder(orderId, callback) {
      
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getMerchantStoreOrder");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Order;

      return this.apiClient.callApi(
        '/api/v3/merchant/stores/orders/{orderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMerchantStoreOrders operation.
     * @callback moduleapi/MerchantApi~getMerchantStoreOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Order>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Merchant Store Orders
     * Gets a list of orders that the user can manage
     * @param {Number} storeId 
     * @param {module:api/MerchantApi~getMerchantStoreOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMerchantStoreOrders(storeId, callback) {
      
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getMerchantStoreOrders");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Order];

      return this.apiClient.callApi(
        '/api/v3/merchant/stores/{storeId}/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMerchantStoreProducts operation.
     * @callback moduleapi/MerchantApi~getMerchantStoreProductsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Product>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Merchant Store Products
     * Gets a list of products that the user can manage
     * @param {Number} storeId 
     * @param {module:api/MerchantApi~getMerchantStoreProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMerchantStoreProducts(storeId, callback) {
      
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getMerchantStoreProducts");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Product];

      return this.apiClient.callApi(
        '/api/v3/merchant/stores/{storeId}/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMerchantStores operation.
     * @callback moduleapi/MerchantApi~getMerchantStoresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Store>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Merchant Stores
     * Gets a list of stores that the user can manage
     * @param {module:api/MerchantApi~getMerchantStoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMerchantStores(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Store];

      return this.apiClient.callApi(
        '/api/v3/merchant/stores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMerchantUser operation.
     * @callback moduleapi/MerchantApi~getMerchantUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProfile{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Store User
     * Gets a User by their ID but only if the user is a customer of the store
     * @param {Number} storeId 
     * @param {String} userId 
     * @param {module:api/MerchantApi~getMerchantUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMerchantUser(storeId, userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getMerchantUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getMerchantUser");
      }

      let pathParams = {
        'storeId': storeId,'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserProfile;

      return this.apiClient.callApi(
        '/api/v3/merchant/stores/{storeId}/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readyMerchantStoreOrder operation.
     * @callback moduleapi/MerchantApi~readyMerchantStoreOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ready Merchant Store Order
     * Mark Order as ready for shipping. This will create the job with the shipping method
     * @param {Number} orderId 
     * @param {module:api/MerchantApi~readyMerchantStoreOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readyMerchantStoreOrder(orderId, callback) {
      
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling readyMerchantStoreOrder");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Order;

      return this.apiClient.callApi(
        '/api/v3/merchant/stores/orders/{orderId}/ready', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateMerchantCategory operation.
     * @callback moduleapi/MerchantApi~updateMerchantCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Category{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Merchant Category
     * Updates a Category in a Merchants Store
     * @param {module:model/Category} body 
     * @param {Number} storeId 
     * @param {module:api/MerchantApi~updateMerchantCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateMerchantCategory(body, storeId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateMerchantCategory");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling updateMerchantCategory");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Category;

      return this.apiClient.callApi(
        '/api/v3/merchant/stores/{storeId}/categories', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateMerchantProduct operation.
     * @callback moduleapi/MerchantApi~updateMerchantProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Merchant Product
     * Updates a Product in a Merchants Store
     * @param {module:model/Product} body 
     * @param {Number} storeId 
     * @param {module:api/MerchantApi~updateMerchantProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateMerchantProduct(body, storeId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateMerchantProduct");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling updateMerchantProduct");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Product;

      return this.apiClient.callApi(
        '/api/v3/merchant/stores/{storeId}/products', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateMerchantStore operation.
     * @callback moduleapi/MerchantApi~updateMerchantStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Store{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Merchant Store
     * Updates a Merchants Store
     * @param {module:model/Store} body 
     * @param {module:api/MerchantApi~updateMerchantStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateMerchantStore(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateMerchantStore");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Store;

      return this.apiClient.callApi(
        '/api/v3/merchant/stores', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}