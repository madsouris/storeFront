/*
 * Hangme API
 * Hangme offers services for our merchant, consumer, driver and partner applications. How you can interact with these services is documented here.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Entity} from './Entity';
import {MediaStorage} from './MediaStorage';

/**
 * The Download model module.
 * @module model/Download
 * @version v1
 */
export class Download extends Entity {
  /**
   * Constructs a new <code>Download</code>.
   * @alias module:model/Download
   * @class
   * @extends module:model/Entity
   */
  constructor() {
    super();
  }

  /**
   * Constructs a <code>Download</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Download} obj Optional instance to populate.
   * @return {module:model/Download} The populated <code>Download</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Download();
      Entity.constructFromObject(data, obj);
      if (data.hasOwnProperty('downloadGuid'))
        obj.downloadGuid = ApiClient.convertToType(data['downloadGuid'], 'String');
      if (data.hasOwnProperty('useDownloadUrl'))
        obj.useDownloadUrl = ApiClient.convertToType(data['useDownloadUrl'], 'Boolean');
      if (data.hasOwnProperty('downloadUrl'))
        obj.downloadUrl = ApiClient.convertToType(data['downloadUrl'], 'String');
      if (data.hasOwnProperty('data'))
        obj.data = ApiClient.convertToType(data['data'], 'Blob');
      if (data.hasOwnProperty('dataContentType'))
        obj.dataContentType = ApiClient.convertToType(data['dataContentType'], 'String');
      if (data.hasOwnProperty('filename'))
        obj.filename = ApiClient.convertToType(data['filename'], 'String');
      if (data.hasOwnProperty('extension'))
        obj.extension = ApiClient.convertToType(data['extension'], 'String');
      if (data.hasOwnProperty('storeId'))
        obj.storeId = ApiClient.convertToType(data['storeId'], 'Number');
      if (data.hasOwnProperty('store'))
        obj.store = ApiClient.convertToType(data['store'], Object);
      if (data.hasOwnProperty('size'))
        obj.size = ApiClient.convertToType(data['size'], 'Number');
      if (data.hasOwnProperty('storage'))
        obj.storage = MediaStorage.constructFromObject(data['storage']);
    }
    return obj;
  }
}

/**
 * The Unique GUID of the Download
 * @member {String} downloadGuid
 */
Download.prototype.downloadGuid = undefined;

/**
 * If this is true the Download can be downloaded from the Download URL
 * @member {Boolean} useDownloadUrl
 */
Download.prototype.useDownloadUrl = undefined;

/**
 * A custom download URL
 * @member {String} downloadUrl
 */
Download.prototype.downloadUrl = undefined;

/**
 * The file data
 * @member {Blob} data
 */
Download.prototype.data = undefined;

/**
 * The file content type
 * @member {String} dataContentType
 */
Download.prototype.dataContentType = undefined;

/**
 * Uploaded filename
 * @member {String} filename
 */
Download.prototype.filename = undefined;

/**
 * The files extension
 * @member {String} extension
 */
Download.prototype.extension = undefined;

/**
 * @member {Number} storeId
 */
Download.prototype.storeId = undefined;

/**
 * @member {Object} store
 */
Download.prototype.store = undefined;

/**
 * @member {Number} size
 */
Download.prototype.size = undefined;

/**
 * @member {module:model/MediaStorage} storage
 */
Download.prototype.storage = undefined;

