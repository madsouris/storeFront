/*
 * Hangme API
 * Hangme offers services for our merchant, consumer, driver and partner applications. How you can interact with these services is documented here.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Entity} from './Entity';
import {OrderItem} from './OrderItem';
import {OrderType} from './OrderType';
import {PaymentMethod} from './PaymentMethod';
import {Shipment} from './Shipment';

/**
 * The Order model module.
 * @module model/Order
 * @version v1
 */
export class Order extends Entity {
  /**
   * Constructs a new <code>Order</code>.
   * @alias module:model/Order
   * @class
   * @extends module:model/Entity
   */
  constructor() {
    super();
  }

  /**
   * Constructs a <code>Order</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Order} obj Optional instance to populate.
   * @return {module:model/Order} The populated <code>Order</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Order();
      Entity.constructFromObject(data, obj);
      if (data.hasOwnProperty('customOrderNumber'))
        obj.customOrderNumber = ApiClient.convertToType(data['customOrderNumber'], 'String');
      if (data.hasOwnProperty('shipmentAddressId'))
        obj.shipmentAddressId = ApiClient.convertToType(data['shipmentAddressId'], 'Number');
      if (data.hasOwnProperty('shipmentAddress'))
        obj.shipmentAddress = ApiClient.convertToType(data['shipmentAddress'], Object);
      if (data.hasOwnProperty('storeId'))
        obj.storeId = ApiClient.convertToType(data['storeId'], 'Number');
      if (data.hasOwnProperty('pickupInStore'))
        obj.pickupInStore = ApiClient.convertToType(data['pickupInStore'], 'Boolean');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], Object);
      if (data.hasOwnProperty('currencyId'))
        obj.currencyId = ApiClient.convertToType(data['currencyId'], 'Number');
      if (data.hasOwnProperty('currencyRate'))
        obj.currencyRate = ApiClient.convertToType(data['currencyRate'], 'Number');
      if (data.hasOwnProperty('vatNumber'))
        obj.vatNumber = ApiClient.convertToType(data['vatNumber'], 'String');
      if (data.hasOwnProperty('subtotalInclTax'))
        obj.subtotalInclTax = ApiClient.convertToType(data['subtotalInclTax'], 'Number');
      if (data.hasOwnProperty('subtotalExclTax'))
        obj.subtotalExclTax = ApiClient.convertToType(data['subtotalExclTax'], 'Number');
      if (data.hasOwnProperty('subtotalDiscountInclTax'))
        obj.subtotalDiscountInclTax = ApiClient.convertToType(data['subtotalDiscountInclTax'], 'Number');
      if (data.hasOwnProperty('subtotalDiscountExclTax'))
        obj.subtotalDiscountExclTax = ApiClient.convertToType(data['subtotalDiscountExclTax'], 'Number');
      if (data.hasOwnProperty('shippingInclTax'))
        obj.shippingInclTax = ApiClient.convertToType(data['shippingInclTax'], 'Number');
      if (data.hasOwnProperty('shippingExclTax'))
        obj.shippingExclTax = ApiClient.convertToType(data['shippingExclTax'], 'Number');
      if (data.hasOwnProperty('paymentFeeInclTax'))
        obj.paymentFeeInclTax = ApiClient.convertToType(data['paymentFeeInclTax'], 'Number');
      if (data.hasOwnProperty('paymentFeeExclTax'))
        obj.paymentFeeExclTax = ApiClient.convertToType(data['paymentFeeExclTax'], 'Number');
      if (data.hasOwnProperty('orderTax'))
        obj.orderTax = ApiClient.convertToType(data['orderTax'], 'Number');
      if (data.hasOwnProperty('orderDiscount'))
        obj.orderDiscount = ApiClient.convertToType(data['orderDiscount'], 'Number');
      if (data.hasOwnProperty('orderTotal'))
        obj.orderTotal = ApiClient.convertToType(data['orderTotal'], 'Number');
      if (data.hasOwnProperty('refundedAmount'))
        obj.refundedAmount = ApiClient.convertToType(data['refundedAmount'], 'Number');
      if (data.hasOwnProperty('ipAddress'))
        obj.ipAddress = ApiClient.convertToType(data['ipAddress'], 'String');
      if (data.hasOwnProperty('authorizationId'))
        obj.authorizationId = ApiClient.convertToType(data['authorizationId'], 'String');
      if (data.hasOwnProperty('authorizationCode'))
        obj.authorizationCode = ApiClient.convertToType(data['authorizationCode'], 'String');
      if (data.hasOwnProperty('authorizationResult'))
        obj.authorizationResult = ApiClient.convertToType(data['authorizationResult'], 'String');
      if (data.hasOwnProperty('captureId'))
        obj.captureId = ApiClient.convertToType(data['captureId'], 'String');
      if (data.hasOwnProperty('captureResult'))
        obj.captureResult = ApiClient.convertToType(data['captureResult'], 'String');
      if (data.hasOwnProperty('paidDate'))
        obj.paidDate = ApiClient.convertToType(data['paidDate'], 'Date');
      if (data.hasOwnProperty('completedDate'))
        obj.completedDate = ApiClient.convertToType(data['completedDate'], 'Date');
      if (data.hasOwnProperty('shippingMethod'))
        obj.shippingMethod = ApiClient.convertToType(data['shippingMethod'], Object);
      if (data.hasOwnProperty('shippingMethodService'))
        obj.shippingMethodService = ApiClient.convertToType(data['shippingMethodService'], 'String');
      if (data.hasOwnProperty('store'))
        obj.store = ApiClient.convertToType(data['store'], Object);
      if (data.hasOwnProperty('items'))
        obj.items = ApiClient.convertToType(data['items'], [OrderItem]);
      if (data.hasOwnProperty('shipmentNote'))
        obj.shipmentNote = ApiClient.convertToType(data['shipmentNote'], 'String');
      if (data.hasOwnProperty('paymentMethod'))
        obj.paymentMethod = PaymentMethod.constructFromObject(data['paymentMethod']);
      if (data.hasOwnProperty('orderType'))
        obj.orderType = OrderType.constructFromObject(data['orderType']);
      if (data.hasOwnProperty('shipments'))
        obj.shipments = ApiClient.convertToType(data['shipments'], [Shipment]);
      if (data.hasOwnProperty('donationAmount'))
        obj.donationAmount = ApiClient.convertToType(data['donationAmount'], 'Number');
      if (data.hasOwnProperty('charityId'))
        obj.charityId = ApiClient.convertToType(data['charityId'], 'Number');
      if (data.hasOwnProperty('charity'))
        obj.charity = ApiClient.convertToType(data['charity'], Object);
      if (data.hasOwnProperty('commissionAmount'))
        obj.commissionAmount = ApiClient.convertToType(data['commissionAmount'], 'Number');
      if (data.hasOwnProperty('cutlery'))
        obj.cutlery = ApiClient.convertToType(data['cutlery'], 'Boolean');
    }
    return obj;
  }
}

/**
 * The Order Number that will be displayed to the Customer
 * @member {String} customOrderNumber
 */
Order.prototype.customOrderNumber = undefined;

/**
 * The ID of the Address the Order will be Shipped to
 * @member {Number} shipmentAddressId
 */
Order.prototype.shipmentAddressId = undefined;

/**
 * @member {Object} shipmentAddress
 */
Order.prototype.shipmentAddress = undefined;

/**
 * The ID of the Store this Order is from
 * @member {Number} storeId
 */
Order.prototype.storeId = undefined;

/**
 * If true, a Shipment will not be created for this order.
 * @member {Boolean} pickupInStore
 */
Order.prototype.pickupInStore = undefined;

/**
 * The current Status of the Order
 * @member {Object} status
 */
Order.prototype.status = undefined;

/**
 * The Currency the Order was made in
 * @member {Number} currencyId
 */
Order.prototype.currencyId = undefined;

/**
 * The Currency Rate at time of Order
 * @member {Number} currencyRate
 */
Order.prototype.currencyRate = undefined;

/**
 * The VAT number for the customer (if applicable)
 * @member {String} vatNumber
 */
Order.prototype.vatNumber = undefined;

/**
 * Subtotal of Order Lines including Tax
 * @member {Number} subtotalInclTax
 */
Order.prototype.subtotalInclTax = undefined;

/**
 * Subtotal of Order Lines excluding Tax
 * @member {Number} subtotalExclTax
 */
Order.prototype.subtotalExclTax = undefined;

/**
 * Subtotal Discount including Tax
 * @member {Number} subtotalDiscountInclTax
 */
Order.prototype.subtotalDiscountInclTax = undefined;

/**
 * Subtotal Discount excluding Tax
 * @member {Number} subtotalDiscountExclTax
 */
Order.prototype.subtotalDiscountExclTax = undefined;

/**
 * Shipping Fee including Tax
 * @member {Number} shippingInclTax
 */
Order.prototype.shippingInclTax = undefined;

/**
 * Shipping Fee excluding Tax
 * @member {Number} shippingExclTax
 */
Order.prototype.shippingExclTax = undefined;

/**
 * Payment Fee including Tax
 * @member {Number} paymentFeeInclTax
 */
Order.prototype.paymentFeeInclTax = undefined;

/**
 * Payment Fee excluding Tax
 * @member {Number} paymentFeeExclTax
 */
Order.prototype.paymentFeeExclTax = undefined;

/**
 * Order Total with tax for this Order
 * @member {Number} orderTax
 */
Order.prototype.orderTax = undefined;

/**
 * Total Discount recieved for this Order
 * @member {Number} orderDiscount
 */
Order.prototype.orderDiscount = undefined;

/**
 * Order Total (Subtotal + Shipment + Payment Fee - Discount)
 * @member {Number} orderTotal
 */
Order.prototype.orderTotal = undefined;

/**
 * Amount Refunded
 * @member {Number} refundedAmount
 */
Order.prototype.refundedAmount = undefined;

/**
 * Client IP Address of Customer
 * @member {String} ipAddress
 */
Order.prototype.ipAddress = undefined;

/**
 * Payment Method Authorization ID
 * @member {String} authorizationId
 */
Order.prototype.authorizationId = undefined;

/**
 * Payment Method Authorization Code
 * @member {String} authorizationCode
 */
Order.prototype.authorizationCode = undefined;

/**
 * Payment Method Authorization Result
 * @member {String} authorizationResult
 */
Order.prototype.authorizationResult = undefined;

/**
 * Payment Method Capture ID
 * @member {String} captureId
 */
Order.prototype.captureId = undefined;

/**
 * Payment Method Capture Result
 * @member {String} captureResult
 */
Order.prototype.captureResult = undefined;

/**
 * The Date the Order was paid
 * @member {Date} paidDate
 */
Order.prototype.paidDate = undefined;

/**
 * The Date the Order was completed
 * @member {Date} completedDate
 */
Order.prototype.completedDate = undefined;

/**
 * The ID of the Shipment Method
 * @member {Object} shippingMethod
 */
Order.prototype.shippingMethod = undefined;

/**
 * @member {String} shippingMethodService
 */
Order.prototype.shippingMethodService = undefined;

/**
 * The Store the Order was created for
 * @member {Object} store
 */
Order.prototype.store = undefined;

/**
 * The order items associated with this order
 * @member {Array.<module:model/OrderItem>} items
 */
Order.prototype.items = undefined;

/**
 * @member {String} shipmentNote
 */
Order.prototype.shipmentNote = undefined;

/**
 * @member {module:model/PaymentMethod} paymentMethod
 */
Order.prototype.paymentMethod = undefined;

/**
 * @member {module:model/OrderType} orderType
 */
Order.prototype.orderType = undefined;

/**
 * @member {Array.<module:model/Shipment>} shipments
 */
Order.prototype.shipments = undefined;

/**
 * @member {Number} donationAmount
 */
Order.prototype.donationAmount = undefined;

/**
 * @member {Number} charityId
 */
Order.prototype.charityId = undefined;

/**
 * @member {Object} charity
 */
Order.prototype.charity = undefined;

/**
 * @member {Number} commissionAmount
 */
Order.prototype.commissionAmount = undefined;

/**
 * @member {Boolean} cutlery
 */
Order.prototype.cutlery = undefined;

