/*
 * Hangme API
 * Hangme offers services for our merchant, consumer, driver and partner applications. How you can interact with these services is documented here.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Entity} from './Entity';
import {MediaLink} from './MediaLink';
import {ProductVariantType} from './ProductVariantType';
import {SyncPlatform} from './SyncPlatform';

/**
 * The Product model module.
 * @module model/Product
 * @version v1
 */
export class Product extends Entity {
  /**
   * Constructs a new <code>Product</code>.
   * @alias module:model/Product
   * @class
   * @extends module:model/Entity
   * @param productCost {} The cost of the Product (used for calculating profit)
   */
  constructor(productCost) {
    super();
    this.productCost = productCost;
  }

  /**
   * Constructs a <code>Product</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Product} obj Optional instance to populate.
   * @return {module:model/Product} The populated <code>Product</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Product();
      Entity.constructFromObject(data, obj);
      if (data.hasOwnProperty('metaKeywords'))
        obj.metaKeywords = ApiClient.convertToType(data['metaKeywords'], 'String');
      if (data.hasOwnProperty('metaTitle'))
        obj.metaTitle = ApiClient.convertToType(data['metaTitle'], 'String');
      if (data.hasOwnProperty('sku'))
        obj.sku = ApiClient.convertToType(data['sku'], 'String');
      if (data.hasOwnProperty('gtin'))
        obj.gtin = ApiClient.convertToType(data['gtin'], 'String');
      if (data.hasOwnProperty('maximumQuantity'))
        obj.maximumQuantity = ApiClient.convertToType(data['maximumQuantity'], 'Number');
      if (data.hasOwnProperty('minimumQuantity'))
        obj.minimumQuantity = ApiClient.convertToType(data['minimumQuantity'], 'Number');
      if (data.hasOwnProperty('isVisible'))
        obj.isVisible = ApiClient.convertToType(data['isVisible'], 'Boolean');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('fullDescription'))
        obj.fullDescription = ApiClient.convertToType(data['fullDescription'], 'String');
      if (data.hasOwnProperty('vendorId'))
        obj.vendorId = ApiClient.convertToType(data['vendorId'], 'Number');
      if (data.hasOwnProperty('showOnHomePage'))
        obj.showOnHomePage = ApiClient.convertToType(data['showOnHomePage'], 'Boolean');
      if (data.hasOwnProperty('metaDescription'))
        obj.metaDescription = ApiClient.convertToType(data['metaDescription'], 'String');
      if (data.hasOwnProperty('isGiftCard'))
        obj.isGiftCard = ApiClient.convertToType(data['isGiftCard'], 'Boolean');
      if (data.hasOwnProperty('giftCardType'))
        obj.giftCardType = ApiClient.convertToType(data['giftCardType'], Object);
      if (data.hasOwnProperty('giftCardAmount'))
        obj.giftCardAmount = ApiClient.convertToType(data['giftCardAmount'], 'Number');
      if (data.hasOwnProperty('isRecurring'))
        obj.isRecurring = ApiClient.convertToType(data['isRecurring'], 'Boolean');
      if (data.hasOwnProperty('recurringCycleLength'))
        obj.recurringCycleLength = ApiClient.convertToType(data['recurringCycleLength'], 'Number');
      if (data.hasOwnProperty('recurringCyclePeriod'))
        obj.recurringCyclePeriod = ApiClient.convertToType(data['recurringCyclePeriod'], Object);
      if (data.hasOwnProperty('recurringTotalCycles'))
        obj.recurringTotalCycles = ApiClient.convertToType(data['recurringTotalCycles'], 'Number');
      if (data.hasOwnProperty('trackInventory'))
        obj.trackInventory = ApiClient.convertToType(data['trackInventory'], 'Boolean');
      if (data.hasOwnProperty('isFreeShipment'))
        obj.isFreeShipment = ApiClient.convertToType(data['isFreeShipment'], 'Boolean');
      if (data.hasOwnProperty('isTaxExempt'))
        obj.isTaxExempt = ApiClient.convertToType(data['isTaxExempt'], 'Boolean');
      if (data.hasOwnProperty('taxCategoryId'))
        obj.taxCategoryId = ApiClient.convertToType(data['taxCategoryId'], 'Number');
      if (data.hasOwnProperty('displayStockAvailability'))
        obj.displayStockAvailability = ApiClient.convertToType(data['displayStockAvailability'], 'Boolean');
      if (data.hasOwnProperty('displayStockQuantity'))
        obj.displayStockQuantity = ApiClient.convertToType(data['displayStockQuantity'], 'Boolean');
      if (data.hasOwnProperty('nonReturnable'))
        obj.nonReturnable = ApiClient.convertToType(data['nonReturnable'], 'Boolean');
      if (data.hasOwnProperty('disableBuyButton'))
        obj.disableBuyButton = ApiClient.convertToType(data['disableBuyButton'], 'Boolean');
      if (data.hasOwnProperty('disableWishlistButton'))
        obj.disableWishlistButton = ApiClient.convertToType(data['disableWishlistButton'], 'Boolean');
      if (data.hasOwnProperty('price'))
        obj.price = ApiClient.convertToType(data['price'], 'Number');
      if (data.hasOwnProperty('oldPrice'))
        obj.oldPrice = ApiClient.convertToType(data['oldPrice'], 'Number');
      if (data.hasOwnProperty('productCost'))
        obj.productCost = ApiClient.convertToType(data['productCost'], 'Number');
      if (data.hasOwnProperty('callForPrice'))
        obj.callForPrice = ApiClient.convertToType(data['callForPrice'], 'Boolean');
      if (data.hasOwnProperty('markAsNew'))
        obj.markAsNew = ApiClient.convertToType(data['markAsNew'], 'Boolean');
      if (data.hasOwnProperty('markAsNewStartDate'))
        obj.markAsNewStartDate = ApiClient.convertToType(data['markAsNewStartDate'], 'Date');
      if (data.hasOwnProperty('markAsNewEndDate'))
        obj.markAsNewEndDate = ApiClient.convertToType(data['markAsNewEndDate'], 'Date');
      if (data.hasOwnProperty('weight'))
        obj.weight = ApiClient.convertToType(data['weight'], 'Number');
      if (data.hasOwnProperty('height'))
        obj.height = ApiClient.convertToType(data['height'], 'Number');
      if (data.hasOwnProperty('width'))
        obj.width = ApiClient.convertToType(data['width'], 'Number');
      if (data.hasOwnProperty('depth'))
        obj.depth = ApiClient.convertToType(data['depth'], 'Number');
      if (data.hasOwnProperty('storeId'))
        obj.storeId = ApiClient.convertToType(data['storeId'], 'Number');
      if (data.hasOwnProperty('store'))
        obj.store = ApiClient.convertToType(data['store'], Object);
      if (data.hasOwnProperty('mediaLinks'))
        obj.mediaLinks = ApiClient.convertToType(data['mediaLinks'], [MediaLink]);
      if (data.hasOwnProperty('quantity'))
        obj.quantity = ApiClient.convertToType(data['quantity'], 'Number');
      if (data.hasOwnProperty('parentId'))
        obj.parentId = ApiClient.convertToType(data['parentId'], 'Number');
      if (data.hasOwnProperty('parent'))
        obj.parent = ApiClient.convertToType(data['parent'], Object);
      if (data.hasOwnProperty('productVariantTypes'))
        obj.productVariantTypes = ApiClient.convertToType(data['productVariantTypes'], [ProductVariantType]);
      if (data.hasOwnProperty('isFeaturedItem'))
        obj.isFeaturedItem = ApiClient.convertToType(data['isFeaturedItem'], 'Boolean');
      if (data.hasOwnProperty('requireDirectDelivery'))
        obj.requireDirectDelivery = ApiClient.convertToType(data['requireDirectDelivery'], 'Boolean');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], Object);
      if (data.hasOwnProperty('syncId'))
        obj.syncId = ApiClient.convertToType(data['syncId'], 'String');
      if (data.hasOwnProperty('lastSynced'))
        obj.lastSynced = ApiClient.convertToType(data['lastSynced'], 'Date');
      if (data.hasOwnProperty('syncPlatform'))
        obj.syncPlatform = SyncPlatform.constructFromObject(data['syncPlatform']);
      if (data.hasOwnProperty('rating'))
        obj.rating = ApiClient.convertToType(data['rating'], 'Number');
      if (data.hasOwnProperty('ratingCount'))
        obj.ratingCount = ApiClient.convertToType(data['ratingCount'], 'Number');
    }
    return obj;
  }
}

/**
 * The Meta Keywords that will be rendered in the header of the page for SEO purposes
 * @member {String} metaKeywords
 */
Product.prototype.metaKeywords = undefined;

/**
 * The Meta Title that will be rendered in the header of the page for SEO purposes
 * @member {String} metaTitle
 */
Product.prototype.metaTitle = undefined;

/**
 * The customer defined SKU for this product
 * @member {String} sku
 */
Product.prototype.sku = undefined;

/**
 * Barcode number for this product
 * @member {String} gtin
 */
Product.prototype.gtin = undefined;

/**
 * The Maximum Quantity that be purchased with one order. If this is 0, any amount can be purchased (to a maximum of available stock, if inventory management is enabled for this product)
 * @member {Number} maximumQuantity
 */
Product.prototype.maximumQuantity = undefined;

/**
 * The Minimum Quantity that can be purchased
 * @member {Number} minimumQuantity
 */
Product.prototype.minimumQuantity = undefined;

/**
 * If true the product will be displayed in the Store. If false, the product will not be displayed
 * @member {Boolean} isVisible
 */
Product.prototype.isVisible = undefined;

/**
 * The short description of the product
 * @member {String} description
 */
Product.prototype.description = undefined;

/**
 * The full description of the product
 * @member {String} fullDescription
 */
Product.prototype.fullDescription = undefined;

/**
 * The ID of the Vendor offering this product
 * @member {Number} vendorId
 */
Product.prototype.vendorId = undefined;

/**
 * If this is true the product will be displayed on the home page of the Store
 * @member {Boolean} showOnHomePage
 */
Product.prototype.showOnHomePage = undefined;

/**
 * The Meta Description that will be rendered on the Product page. This is used for SEO purposes
 * @member {String} metaDescription
 */
Product.prototype.metaDescription = undefined;

/**
 * Is this Product a Gift Card?
 * @member {Boolean} isGiftCard
 */
Product.prototype.isGiftCard = undefined;

/**
 * The Type of Gift Card
 * @member {Object} giftCardType
 */
Product.prototype.giftCardType = undefined;

/**
 * The amount of the Gift Card
 * @member {Number} giftCardAmount
 */
Product.prototype.giftCardAmount = undefined;

/**
 * Is this a recurring Order?
 * @member {Boolean} isRecurring
 */
Product.prototype.isRecurring = undefined;

/**
 * The Cycle Length of the recurring payment
 * @member {Number} recurringCycleLength
 */
Product.prototype.recurringCycleLength = undefined;

/**
 * The Cycle Period of the Recurring Order (e.g. Days, Weeks, Months, Year)
 * @member {Object} recurringCyclePeriod
 */
Product.prototype.recurringCyclePeriod = undefined;

/**
 * Total number of recurring cycles
 * @member {Number} recurringTotalCycles
 */
Product.prototype.recurringTotalCycles = undefined;

/**
 * Should this product be inventory tracked? If false, purchases will not affect stock levels etc...
 * @member {Boolean} trackInventory
 */
Product.prototype.trackInventory = undefined;

/**
 * If true, delivery fee will not be added for Order Items of this Product
 * @member {Boolean} isFreeShipment
 */
Product.prototype.isFreeShipment = undefined;

/**
 * If true, tax will not be calculated for this product
 * @member {Boolean} isTaxExempt
 */
Product.prototype.isTaxExempt = undefined;

/**
 * The ID of the Tax Category for this Product
 * @member {Number} taxCategoryId
 */
Product.prototype.taxCategoryId = undefined;

/**
 * If true, stock availability will be shown in the Store.
 * @member {Boolean} displayStockAvailability
 */
Product.prototype.displayStockAvailability = undefined;

/**
 * If true, stock quantity will be shown in the Store.
 * @member {Boolean} displayStockQuantity
 */
Product.prototype.displayStockQuantity = undefined;

/**
 * If true, this product will be displayed and non-returnable and will be filtered out of any orders to return
 * @member {Boolean} nonReturnable
 */
Product.prototype.nonReturnable = undefined;

/**
 * If true, the Buy Now button will be disabled on the Store when browsing this product
 * @member {Boolean} disableBuyButton
 */
Product.prototype.disableBuyButton = undefined;

/**
 * If true, the Wishlist button will be disabled on the Store when browsing this product
 * @member {Boolean} disableWishlistButton
 */
Product.prototype.disableWishlistButton = undefined;

/**
 * The price displayed for this Product
 * @member {Number} price
 */
Product.prototype.price = undefined;

/**
 * The old price of the product (stored for sales display)
 * @member {Number} oldPrice
 */
Product.prototype.oldPrice = undefined;

/**
 * The cost of the Product (used for calculating profit)
 * @member {Number} productCost
 */
Product.prototype.productCost = undefined;

/**
 * If this is enabled, the Price will not be displayed for the Product. Instead a notice saying to call for the price will be displayed
 * @member {Boolean} callForPrice
 */
Product.prototype.callForPrice = undefined;

/**
 * If this is true, a new marker will show against the product
 * @member {Boolean} markAsNew
 */
Product.prototype.markAsNew = undefined;

/**
 * The Start Date/Time when the Product will be marked as New
 * @member {Date} markAsNewStartDate
 */
Product.prototype.markAsNewStartDate = undefined;

/**
 * The End Date/Time when the Product will stop being marked as New
 * @member {Date} markAsNewEndDate
 */
Product.prototype.markAsNewEndDate = undefined;

/**
 * The weight of the Product
 * @member {Number} weight
 */
Product.prototype.weight = undefined;

/**
 * Height of the Product
 * @member {Number} height
 */
Product.prototype.height = undefined;

/**
 * Width of the Product
 * @member {Number} width
 */
Product.prototype.width = undefined;

/**
 * Depth of the Product
 * @member {Number} depth
 */
Product.prototype.depth = undefined;

/**
 * The ID of the Store this Product belongs to
 * @member {Number} storeId
 */
Product.prototype.storeId = undefined;

/**
 * The Store this Product belongs to
 * @member {Object} store
 */
Product.prototype.store = undefined;

/**
 * The Media Files associated with this Product
 * @member {Array.<module:model/MediaLink>} mediaLinks
 */
Product.prototype.mediaLinks = undefined;

/**
 * Current Quantity in Stock
 * @member {Number} quantity
 */
Product.prototype.quantity = undefined;

/**
 * @member {Number} parentId
 */
Product.prototype.parentId = undefined;

/**
 * @member {Object} parent
 */
Product.prototype.parent = undefined;

/**
 * @member {Array.<module:model/ProductVariantType>} productVariantTypes
 */
Product.prototype.productVariantTypes = undefined;

/**
 * Determines if the Product is a Featured Item
 * @member {Boolean} isFeaturedItem
 */
Product.prototype.isFeaturedItem = undefined;

/**
 * Determines that this Product requires Direct Delivery
 * @member {Boolean} requireDirectDelivery
 */
Product.prototype.requireDirectDelivery = undefined;

/**
 * Sets if Product is Physical, Digital etc...
 * @member {Object} type
 */
Product.prototype.type = undefined;

/**
 * @member {String} syncId
 */
Product.prototype.syncId = undefined;

/**
 * @member {Date} lastSynced
 */
Product.prototype.lastSynced = undefined;

/**
 * @member {module:model/SyncPlatform} syncPlatform
 */
Product.prototype.syncPlatform = undefined;

/**
 * @member {Number} rating
 */
Product.prototype.rating = undefined;

/**
 * @member {Number} ratingCount
 */
Product.prototype.ratingCount = undefined;

