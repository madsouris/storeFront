/*
 * Hangme API
 * Hangme offers services for our merchant, consumer, driver and partner applications. How you can interact with these services is documented here.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Entity} from './Entity';
import {MediaLink} from './MediaLink';
import {Note} from './Note';
import {OpeningHour} from './OpeningHour';
import {Product} from './Product';
import {SyncPlatform} from './SyncPlatform';

/**
 * The Store model module.
 * @module model/Store
 * @version v1
 */
export class Store extends Entity {
  /**
   * Constructs a new <code>Store</code>.
   * @alias module:model/Store
   * @class
   * @extends module:model/Entity
   */
  constructor() {
    super();
  }

  /**
   * Constructs a <code>Store</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Store} obj Optional instance to populate.
   * @return {module:model/Store} The populated <code>Store</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Store();
      Entity.constructFromObject(data, obj);
      if (data.hasOwnProperty('isPublic'))
        obj.isPublic = ApiClient.convertToType(data['isPublic'], 'Boolean');
      if (data.hasOwnProperty('color'))
        obj.color = ApiClient.convertToType(data['color'], 'String');
      if (data.hasOwnProperty('icon'))
        obj.icon = ApiClient.convertToType(data['icon'], 'String');
      if (data.hasOwnProperty('facebookPageId'))
        obj.facebookPageId = ApiClient.convertToType(data['facebookPageId'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('facebookPixel'))
        obj.facebookPixel = ApiClient.convertToType(data['facebookPixel'], 'String');
      if (data.hasOwnProperty('url'))
        obj.url = ApiClient.convertToType(data['url'], 'String');
      if (data.hasOwnProperty('phoneNumber'))
        obj.phoneNumber = ApiClient.convertToType(data['phoneNumber'], 'String');
      if (data.hasOwnProperty('theme'))
        obj.theme = ApiClient.convertToType(data['theme'], 'String');
      if (data.hasOwnProperty('mediaLinks'))
        obj.mediaLinks = ApiClient.convertToType(data['mediaLinks'], [MediaLink]);
      if (data.hasOwnProperty('facebookPageAccessToken'))
        obj.facebookPageAccessToken = ApiClient.convertToType(data['facebookPageAccessToken'], 'String');
      if (data.hasOwnProperty('facebook'))
        obj.facebook = ApiClient.convertToType(data['facebook'], 'String');
      if (data.hasOwnProperty('facebookAppId'))
        obj.facebookAppId = ApiClient.convertToType(data['facebookAppId'], 'String');
      if (data.hasOwnProperty('openAllHours'))
        obj.openAllHours = ApiClient.convertToType(data['openAllHours'], 'Boolean');
      if (data.hasOwnProperty('privateAddress'))
        obj.privateAddress = ApiClient.convertToType(data['privateAddress'], 'Boolean');
      if (data.hasOwnProperty('domain'))
        obj.domain = ApiClient.convertToType(data['domain'], 'String');
      if (data.hasOwnProperty('subdomain'))
        obj.subdomain = ApiClient.convertToType(data['subdomain'], 'String');
      if (data.hasOwnProperty('subscription'))
        obj.subscription = ApiClient.convertToType(data['subscription'], Object);
      if (data.hasOwnProperty('subscriptionId'))
        obj.subscriptionId = ApiClient.convertToType(data['subscriptionId'], 'Number');
      if (data.hasOwnProperty('addressId'))
        obj.addressId = ApiClient.convertToType(data['addressId'], 'Number');
      if (data.hasOwnProperty('address'))
        obj.address = ApiClient.convertToType(data['address'], Object);
      if (data.hasOwnProperty('email'))
        obj.email = ApiClient.convertToType(data['email'], 'String');
      if (data.hasOwnProperty('instagram'))
        obj.instagram = ApiClient.convertToType(data['instagram'], 'String');
      if (data.hasOwnProperty('twitter'))
        obj.twitter = ApiClient.convertToType(data['twitter'], 'String');
      if (data.hasOwnProperty('youtube'))
        obj.youtube = ApiClient.convertToType(data['youtube'], 'String');
      if (data.hasOwnProperty('pinterest'))
        obj.pinterest = ApiClient.convertToType(data['pinterest'], 'String');
      if (data.hasOwnProperty('messenger'))
        obj.messenger = ApiClient.convertToType(data['messenger'], 'String');
      if (data.hasOwnProperty('telegram'))
        obj.telegram = ApiClient.convertToType(data['telegram'], 'String');
      if (data.hasOwnProperty('line'))
        obj.line = ApiClient.convertToType(data['line'], 'String');
      if (data.hasOwnProperty('skype'))
        obj.skype = ApiClient.convertToType(data['skype'], 'String');
      if (data.hasOwnProperty('whatsapp'))
        obj.whatsapp = ApiClient.convertToType(data['whatsapp'], 'String');
      if (data.hasOwnProperty('wechat'))
        obj.wechat = ApiClient.convertToType(data['wechat'], 'String');
      if (data.hasOwnProperty('verificationId'))
        obj.verificationId = ApiClient.convertToType(data['verificationId'], 'Number');
      if (data.hasOwnProperty('verification'))
        obj.verification = ApiClient.convertToType(data['verification'], Object);
      if (data.hasOwnProperty('isBusiness'))
        obj.isBusiness = ApiClient.convertToType(data['isBusiness'], 'Boolean');
      if (data.hasOwnProperty('isDisabled'))
        obj.isDisabled = ApiClient.convertToType(data['isDisabled'], 'Boolean');
      if (data.hasOwnProperty('isHidden'))
        obj.isHidden = ApiClient.convertToType(data['isHidden'], 'Boolean');
      if (data.hasOwnProperty('enableCollectFromStore'))
        obj.enableCollectFromStore = ApiClient.convertToType(data['enableCollectFromStore'], 'Boolean');
      if (data.hasOwnProperty('enableCollectFromStoreCashPayment'))
        obj.enableCollectFromStoreCashPayment = ApiClient.convertToType(data['enableCollectFromStoreCashPayment'], 'Boolean');
      if (data.hasOwnProperty('enableCheckIn'))
        obj.enableCheckIn = ApiClient.convertToType(data['enableCheckIn'], 'Boolean');
      if (data.hasOwnProperty('openingHours'))
        obj.openingHours = ApiClient.convertToType(data['openingHours'], [OpeningHour]);
      if (data.hasOwnProperty('enableFacebookChat'))
        obj.enableFacebookChat = ApiClient.convertToType(data['enableFacebookChat'], 'Boolean');
      if (data.hasOwnProperty('enforceOpeningHours'))
        obj.enforceOpeningHours = ApiClient.convertToType(data['enforceOpeningHours'], 'Boolean');
      if (data.hasOwnProperty('closed'))
        obj.closed = ApiClient.convertToType(data['closed'], 'Boolean');
      if (data.hasOwnProperty('forceRedirectOnGroup'))
        obj.forceRedirectOnGroup = ApiClient.convertToType(data['forceRedirectOnGroup'], 'Boolean');
      if (data.hasOwnProperty('products'))
        obj.products = ApiClient.convertToType(data['products'], [Product]);
      if (data.hasOwnProperty('isDemo'))
        obj.isDemo = ApiClient.convertToType(data['isDemo'], 'Boolean');
      if (data.hasOwnProperty('notes'))
        obj.notes = ApiClient.convertToType(data['notes'], [Note]);
      if (data.hasOwnProperty('syncId'))
        obj.syncId = ApiClient.convertToType(data['syncId'], 'String');
      if (data.hasOwnProperty('lastSynced'))
        obj.lastSynced = ApiClient.convertToType(data['lastSynced'], 'Date');
      if (data.hasOwnProperty('syncPlatform'))
        obj.syncPlatform = SyncPlatform.constructFromObject(data['syncPlatform']);
      if (data.hasOwnProperty('enableBankTransfer'))
        obj.enableBankTransfer = ApiClient.convertToType(data['enableBankTransfer'], 'Boolean');
      if (data.hasOwnProperty('storeCategoryId'))
        obj.storeCategoryId = ApiClient.convertToType(data['storeCategoryId'], 'Number');
      if (data.hasOwnProperty('storeCategory'))
        obj.storeCategory = ApiClient.convertToType(data['storeCategory'], Object);
      if (data.hasOwnProperty('enableDonations'))
        obj.enableDonations = ApiClient.convertToType(data['enableDonations'], 'Boolean');
      if (data.hasOwnProperty('deliveryPartnerId'))
        obj.deliveryPartnerId = ApiClient.convertToType(data['deliveryPartnerId'], 'Number');
      if (data.hasOwnProperty('deliveryPartner'))
        obj.deliveryPartner = ApiClient.convertToType(data['deliveryPartner'], Object);
      if (data.hasOwnProperty('googleAnalytics'))
        obj.googleAnalytics = ApiClient.convertToType(data['googleAnalytics'], 'String');
      if (data.hasOwnProperty('rating'))
        obj.rating = ApiClient.convertToType(data['rating'], 'Number');
      if (data.hasOwnProperty('ratingCount'))
        obj.ratingCount = ApiClient.convertToType(data['ratingCount'], 'Number');
      if (data.hasOwnProperty('offerCutlery'))
        obj.offerCutlery = ApiClient.convertToType(data['offerCutlery'], 'Boolean');
    }
    return obj;
  }
}

/**
 * This field determines if the Store should be listed in Public Directories
 * @member {Boolean} isPublic
 */
Store.prototype.isPublic = undefined;

/**
 * The primary color displayed on the Store
 * @member {String} color
 */
Store.prototype.color = undefined;

/**
 * The Material Icon name to show for this Store if no logo is available
 * @member {String} icon
 */
Store.prototype.icon = undefined;

/**
 * The Facebook ID of the Page connected to this Store
 * @member {String} facebookPageId
 */
Store.prototype.facebookPageId = undefined;

/**
 * A description/about us for the Store
 * @member {String} description
 */
Store.prototype.description = undefined;

/**
 * The Facebook Pixel ID
 * @member {String} facebookPixel
 */
Store.prototype.facebookPixel = undefined;

/**
 * The URL of the Store
 * @member {String} url
 */
Store.prototype.url = undefined;

/**
 * The stores phone number
 * @member {String} phoneNumber
 */
Store.prototype.phoneNumber = undefined;

/**
 * The name of the Store theme
 * @member {String} theme
 */
Store.prototype.theme = undefined;

/**
 * The Media Links associated to this Store
 * @member {Array.<module:model/MediaLink>} mediaLinks
 */
Store.prototype.mediaLinks = undefined;

/**
 * The Access Token for the Facebook Page connected to the Store
 * @member {String} facebookPageAccessToken
 */
Store.prototype.facebookPageAccessToken = undefined;

/**
 * The URL to the Store's Facebook Page
 * @member {String} facebook
 */
Store.prototype.facebook = undefined;

/**
 * The ID of the Facebook App assigned to the Store
 * @member {String} facebookAppId
 */
Store.prototype.facebookAppId = undefined;

/**
 * Sets if the Store is Open All Hours
 * @member {Boolean} openAllHours
 */
Store.prototype.openAllHours = undefined;

/**
 * Is this address private? If this is true the store address should not be shown to consumers
 * @member {Boolean} privateAddress
 */
Store.prototype.privateAddress = undefined;

/**
 * The Domain to use for the store
 * @member {String} domain
 */
Store.prototype.domain = undefined;

/**
 * The Subdomain to use for the store
 * @member {String} subdomain
 */
Store.prototype.subdomain = undefined;

/**
 * @member {Object} subscription
 */
Store.prototype.subscription = undefined;

/**
 * @member {Number} subscriptionId
 */
Store.prototype.subscriptionId = undefined;

/**
 * @member {Number} addressId
 */
Store.prototype.addressId = undefined;

/**
 * @member {Object} address
 */
Store.prototype.address = undefined;

/**
 * @member {String} email
 */
Store.prototype.email = undefined;

/**
 * The link to the store's Instagram Account
 * @member {String} instagram
 */
Store.prototype.instagram = undefined;

/**
 * The link to the store's Twitter Account
 * @member {String} twitter
 */
Store.prototype.twitter = undefined;

/**
 * The link to the store's Youtube Account
 * @member {String} youtube
 */
Store.prototype.youtube = undefined;

/**
 * The link to the store's Pinterest Account
 * @member {String} pinterest
 */
Store.prototype.pinterest = undefined;

/**
 * The link to the store's Messenger Account
 * @member {String} messenger
 */
Store.prototype.messenger = undefined;

/**
 * The link to the store's Telegram Account
 * @member {String} telegram
 */
Store.prototype.telegram = undefined;

/**
 * The link to the store's Line Account
 * @member {String} line
 */
Store.prototype.line = undefined;

/**
 * The link to the store's Skype Account
 * @member {String} skype
 */
Store.prototype.skype = undefined;

/**
 * The link to the store's Whatsapp Account
 * @member {String} whatsapp
 */
Store.prototype.whatsapp = undefined;

/**
 * The link to the store's WeChat Account
 * @member {String} wechat
 */
Store.prototype.wechat = undefined;

/**
 * @member {Number} verificationId
 */
Store.prototype.verificationId = undefined;

/**
 * @member {Object} verification
 */
Store.prototype.verification = undefined;

/**
 * Show if store is a registered business
 * @member {Boolean} isBusiness
 */
Store.prototype.isBusiness = undefined;

/**
 * This field will be true if the Store has been disabled by Hangme admin
 * @member {Boolean} isDisabled
 */
Store.prototype.isDisabled = undefined;

/**
 * This field will be true if the Merchant has set the Store to be hidden. This means that the storefront will not be accessible but the Merchant can stil access the backend.
 * @member {Boolean} isHidden
 */
Store.prototype.isHidden = undefined;

/**
 * If this field is true, Collect from Store will appear as a Delivery option for consumers for this Store. Note - Stores must be using a paid subscription to use this feature.
 * @member {Boolean} enableCollectFromStore
 */
Store.prototype.enableCollectFromStore = undefined;

/**
 * If this field is true, Merchant can the complete Order by taking cash from the Consumer.
 * @member {Boolean} enableCollectFromStoreCashPayment
 */
Store.prototype.enableCollectFromStoreCashPayment = undefined;

/**
 * If this field is true, a Consumer can check into a Store, creating an In Person order. If the consumer is checked into the Store, Items added to cart 
 * @member {Boolean} enableCheckIn
 */
Store.prototype.enableCheckIn = undefined;

/**
 * @member {Array.<module:model/OpeningHour>} openingHours
 */
Store.prototype.openingHours = undefined;

/**
 * @member {Boolean} enableFacebookChat
 */
Store.prototype.enableFacebookChat = undefined;

/**
 * Only allow Orders to be created during the opening hours
 * @member {Boolean} enforceOpeningHours
 */
Store.prototype.enforceOpeningHours = undefined;

/**
 * Temporarily close store
 * @member {Boolean} closed
 */
Store.prototype.closed = undefined;

/**
 * @member {Boolean} forceRedirectOnGroup
 */
Store.prototype.forceRedirectOnGroup = undefined;

/**
 * @member {Array.<module:model/Product>} products
 */
Store.prototype.products = undefined;

/**
 * @member {Boolean} isDemo
 */
Store.prototype.isDemo = undefined;

/**
 * @member {Array.<module:model/Note>} notes
 */
Store.prototype.notes = undefined;

/**
 * @member {String} syncId
 */
Store.prototype.syncId = undefined;

/**
 * @member {Date} lastSynced
 */
Store.prototype.lastSynced = undefined;

/**
 * @member {module:model/SyncPlatform} syncPlatform
 */
Store.prototype.syncPlatform = undefined;

/**
 * @member {Boolean} enableBankTransfer
 */
Store.prototype.enableBankTransfer = undefined;

/**
 * @member {Number} storeCategoryId
 */
Store.prototype.storeCategoryId = undefined;

/**
 * @member {Object} storeCategory
 */
Store.prototype.storeCategory = undefined;

/**
 * @member {Boolean} enableDonations
 */
Store.prototype.enableDonations = undefined;

/**
 * @member {Number} deliveryPartnerId
 */
Store.prototype.deliveryPartnerId = undefined;

/**
 * @member {Object} deliveryPartner
 */
Store.prototype.deliveryPartner = undefined;

/**
 * @member {String} googleAnalytics
 */
Store.prototype.googleAnalytics = undefined;

/**
 * @member {Number} rating
 */
Store.prototype.rating = undefined;

/**
 * @member {Number} ratingCount
 */
Store.prototype.ratingCount = undefined;

/**
 * @member {Boolean} offerCutlery
 */
Store.prototype.offerCutlery = undefined;

