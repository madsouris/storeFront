/*
 * Hangme API
 * Hangme offers services for our merchant, consumer, driver and partner applications. How you can interact with these services is documented here.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Entity} from './Entity';
import {PaymentMethod} from './PaymentMethod';
import {SubscriptionType} from './SubscriptionType';

/**
 * The Subscription model module.
 * @module model/Subscription
 * @version v1
 */
export class Subscription extends Entity {
  /**
   * Constructs a new <code>Subscription</code>.
   * @alias module:model/Subscription
   * @class
   * @extends module:model/Entity
   */
  constructor() {
    super();
  }

  /**
   * Constructs a <code>Subscription</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Subscription} obj Optional instance to populate.
   * @return {module:model/Subscription} The populated <code>Subscription</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Subscription();
      Entity.constructFromObject(data, obj);
      if (data.hasOwnProperty('userId'))
        obj.userId = ApiClient.convertToType(data['userId'], 'String');
      if (data.hasOwnProperty('isPlatformSubscription'))
        obj.isPlatformSubscription = ApiClient.convertToType(data['isPlatformSubscription'], 'Boolean');
      if (data.hasOwnProperty('previousPayment'))
        obj.previousPayment = ApiClient.convertToType(data['previousPayment'], 'Date');
      if (data.hasOwnProperty('nextPayment'))
        obj.nextPayment = ApiClient.convertToType(data['nextPayment'], 'Date');
      if (data.hasOwnProperty('enabled'))
        obj.enabled = ApiClient.convertToType(data['enabled'], 'Boolean');
      if (data.hasOwnProperty('cancelled'))
        obj.cancelled = ApiClient.convertToType(data['cancelled'], 'Boolean');
      if (data.hasOwnProperty('endDate'))
        obj.endDate = ApiClient.convertToType(data['endDate'], 'Date');
      if (data.hasOwnProperty('paymentMethod'))
        obj.paymentMethod = PaymentMethod.constructFromObject(data['paymentMethod']);
      if (data.hasOwnProperty('paymentMethodId'))
        obj.paymentMethodId = ApiClient.convertToType(data['paymentMethodId'], 'String');
      if (data.hasOwnProperty('amount'))
        obj.amount = ApiClient.convertToType(data['amount'], 'Number');
      if (data.hasOwnProperty('currencyId'))
        obj.currencyId = ApiClient.convertToType(data['currencyId'], 'Number');
      if (data.hasOwnProperty('currency'))
        obj.currency = ApiClient.convertToType(data['currency'], Object);
      if (data.hasOwnProperty('type'))
        obj.type = SubscriptionType.constructFromObject(data['type']);
      if (data.hasOwnProperty('commissionPercentage'))
        obj.commissionPercentage = ApiClient.convertToType(data['commissionPercentage'], 'Number');
      if (data.hasOwnProperty('cancelJobId'))
        obj.cancelJobId = ApiClient.convertToType(data['cancelJobId'], 'String');
    }
    return obj;
  }
}

/**
 * The ID of the User which is the Account Owner
 * @member {String} userId
 */
Subscription.prototype.userId = undefined;

/**
 * @member {Boolean} isPlatformSubscription
 */
Subscription.prototype.isPlatformSubscription = undefined;

/**
 * The Date/Time the last payment was successfully taken
 * @member {Date} previousPayment
 */
Subscription.prototype.previousPayment = undefined;

/**
 * The Date/Time when the subscription will renew
 * @member {Date} nextPayment
 */
Subscription.prototype.nextPayment = undefined;

/**
 * Marks whether the Subscription is active and should renew. If this is false, payment will not be taken on the Next Payment date
 * @member {Boolean} enabled
 */
Subscription.prototype.enabled = undefined;

/**
 * Shows if the Subscription is currently cancelled or in the process of being cancelled during the current billing cycle
 * @member {Boolean} cancelled
 */
Subscription.prototype.cancelled = undefined;

/**
 * The Subscription should be set Renew to False when the End Date is less then the current date/time
 * @member {Date} endDate
 */
Subscription.prototype.endDate = undefined;

/**
 * @member {module:model/PaymentMethod} paymentMethod
 */
Subscription.prototype.paymentMethod = undefined;

/**
 * @member {String} paymentMethodId
 */
Subscription.prototype.paymentMethodId = undefined;

/**
 * @member {Number} amount
 */
Subscription.prototype.amount = undefined;

/**
 * @member {Number} currencyId
 */
Subscription.prototype.currencyId = undefined;

/**
 * @member {Object} currency
 */
Subscription.prototype.currency = undefined;

/**
 * @member {module:model/SubscriptionType} type
 */
Subscription.prototype.type = undefined;

/**
 * @member {Number} commissionPercentage
 */
Subscription.prototype.commissionPercentage = undefined;

/**
 * @member {String} cancelJobId
 */
Subscription.prototype.cancelJobId = undefined;

// Implement OneOfMerchantStoreDashboardSubscription interface:
